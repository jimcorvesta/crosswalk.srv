/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5d5414802e8ab75d05c74293
*
* You will get 10% discount for each one of your friends
* 
*/
package com.crosswalk.controller.base;

import java.util.List;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.http.ResponseEntity;
import org.modelmapper.ModelMapper;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.springframework.security.access.annotation.Secured;
import org.springframework.beans.factory.annotation.Autowired;
import com.crosswalk.db.crosswalk_db.service.CrosswalkService;
import com.crosswalk.db.crosswalk_db.entity.Crosswalk;
import com.crosswalk.db.crosswalk_db.dtos.CrosswalkDto;

//IMPORT RELATIONS


public class CrosswalkBaseController {
    
    @Autowired
	CrosswalkService crosswalkService;

	

	@Autowired
	private ModelMapper modelMapper;



//CRUD METHODS


    //CRUD - CREATE
    @Secured({ "ROLE_PRIVATE_USER" })
	@PostMapping("/crosswalk")
	public ResponseEntity<CrosswalkDto> insert(@RequestBody Crosswalk obj) {
				
		
		return ResponseEntity.ok().body(convertToDto(crosswalkService.insert(obj)));
	}

	
    //CRUD - REMOVE
    @Secured({ "ROLE_PRIVATE_USER" })
	@DeleteMapping("/crosswalk/{id}")
	public ResponseEntity<Void> delete(@PathVariable("id") Long id) {
		Crosswalk crosswalkSelected = crosswalkService.getOne(id);
		
		crosswalkService.delete(id);
		return ResponseEntity.ok().build();
	}
	
	
    //CRUD - GET ONE
    @Secured({ "ROLE_PRIVATE_USER" })
	@GetMapping("/crosswalk/{id}")
	public ResponseEntity<CrosswalkDto> get(@PathVariable("id") Long id) {
		Crosswalk crosswalkSelected = crosswalkService.getOne(id);
		return ResponseEntity.ok().body(convertToDto(crosswalkSelected));
	}
	
	
    //CRUD - GET LIST
    @Secured({ "ROLE_PRIVATE_USER" })
	@GetMapping("/crosswalk")
	public ResponseEntity<List<CrosswalkDto>> getList() {
		List<Crosswalk> list = crosswalkService.getAll();
		List<CrosswalkDto> listDto = list.stream()
				.map(crosswalk -> convertToDto(crosswalk))
				.collect(Collectors.toList());
		return ResponseEntity.ok().body(listDto);
	}


    //CRUD - EDIT
    @Secured({ "ROLE_PRIVATE_USER" })
	@PostMapping("/crosswalk/{id}")
	public ResponseEntity<CrosswalkDto> update(@RequestBody Crosswalk obj, @PathVariable("id") Long id) {
	    
		
		return ResponseEntity.ok().body(convertToDto(crosswalkService.insert(obj)));
	}
	


/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  Custom.js
 */


	private CrosswalkDto convertToDto(Crosswalk crosswalk) {
		CrosswalkDto crosswalkDto = modelMapper.map(crosswalk, CrosswalkDto.class);
		return crosswalkDto;
	}
}
